name: fast-n-foodious-ms-produto-ci
run-name: Fast & Foodious CI/CD - Produto

on: [push]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Run Unit Tests
        run: npm install && npm run test

  coverage-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Running coverage tests
        run: npm install && npm run test:cov

  check-tests-impl:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Verify Components Without Unit/E2E Tests
        run: npm install && npm run test:check

  e2e-in-memory:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Run E2E Tests (With In-Memory Repositories)
        run: npm install && NODE_ENV=local-mock-repository npm run test:e2e

  e2e-mysql:
    runs-on: ubuntu-latest
    env:
      MYSQL_USER: ${{vars.MYSQL_USER}}
      MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
      MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Running e2e in mysql server - Build Docker Images for Tests
        run: docker-compose --env-file ./envs/prod.env build
      - name: Running e2e in mysql server - Start Docker Containers
        run: docker-compose --env-file ./envs/prod.env up -d
      - name: Running e2e in mysql server - Wait for MySQL to Accept Connections
        run: docker-compose --env-file ./envs/prod.env exec -T mysql sh -c "until mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD ; do sleep 1; done"
      # - name: Create schema MySQL Schema & Populate Database
      #   run: |
      #     docker cp ./scripts/schema/. $(docker-compose ps -q mysql):/docker-entrypoint-initdb.d
      #     docker-compose --env-file ./envs/prod.env exec -T mysql sh -c "mysql -uroot -pMYSQL_ROOT_PASSWORD -e 'source /docker-entrypoint-initdb.d/1-init.sql; source /docker-entrypoint-initdb.d/2-populate.sql;'"
      - name: Run E2E Tests (With TypeORM Repositories - MySQL)
        run: docker-compose --env-file ./envs/prod.env exec -T fast-n-foodious-ms-produto sh -c "npm run test:e2e"
      - name: Stop and Remove Docker Containers
        run: docker-compose --env-file ./envs/prod.env down

  bdd-in-memory:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
      - name: Install dependencies
        run: npm install
      - name: Starting Server
        run: |
          NODE_ENV=local-mock-repository npm run start & npx wait-on http://localhost:3000
      - name: Run BDD Tests (With In-Memory Repositories)
        run: npm run test:bdd

  bdd-mysql:
    runs-on: ubuntu-latest
    env:
      MYSQL_USER: ${{vars.MYSQL_USER}}
      MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
      MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
      - name: Running BDD in mysql server - Build Docker Images for Tests
        run: docker-compose --env-file ./envs/prod.env build
      - name: Running BDD in mysql server - Start Docker Containers
        run: docker-compose --env-file ./envs/prod.env up -d
      - name: Running BDD in mysql server - Wait for MySQL to Accept Connections
        run: docker-compose --env-file ./envs/prod.env exec -T mysql sh -c "until mysqladmin ping -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD ; do sleep 1; done"

      - name: Run BDD Tests (With TypeORM Repositories - MySQL)
        run: docker-compose --env-file ./envs/prod.env exec -T fast-n-foodious-ms-produto sh -c "npm run start & npx wait-on http://localhost:3000 & npm run test:bdd"
      - name: Stop and Remove Docker Containers
        run: docker-compose --env-file ./envs/prod.env down

  # Publicação de imagem no DockerBuh para inibição de custos, logo o job "build-ecr" foi desativado
  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - coverage-tests
      - check-tests-impl
      - e2e-in-memory
      - e2e-mysql
      - bdd-in-memory
      - bdd-mysql
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Build Image & Push It To Registry
        env:
          DOCKER_USERNAME: ${{vars.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker context create tls-env
          docker buildx create tls-env --use
          docker buildx build --push --platform linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64 --tag $DOCKER_USERNAME/fast-n-foodious-ms-produto:${{github.run_number}} .
          docker buildx build --push --platform linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64 --tag $DOCKER_USERNAME/fast-n-foodious-ms-produto:latest .
          echo "Docker image pushed successfully!"

  # build-ecr:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   runs-on: ubuntu-latest
  #   needs: e2e-tests
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Use Node.js
  #       uses: actions/setup-node@v3

  #     - name: Login to AWS ECR
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       run: |
  #         aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious-ms-produto

  #     - name: Build Docker Image
  #       run: docker build -t felipemaxrosa/fast-n-foodious-ms-produto:latest .
  #     - name: Tag Docker Image
  #       run: |
  #         docker tag felipemaxrosa/fast-n-foodious-ms-produto:latest 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious-ms-produto:latest
  #     - name: Push Docker Image to ECR
  #       run: |
  #         docker push 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious-ms-produto:latest
